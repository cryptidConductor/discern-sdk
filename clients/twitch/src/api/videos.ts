
/******************************************************************************
 *
 * !!!WARNING!!!
 *
 * This file is automatically generated. Do not edit this file directly.
 *
 * This file was generated using the twitch generation script, found in the
 * `scripts/twitch` directory of the repository.
 *
 *****************************************************************************/

import type { Twitch } from "../index";
import type { TokenId } from "../types";
import { z } from "zod";

export interface GetVideosRequest {
  /**
   * A list of IDs that identify the videos you want to get. To get more than
   * one video, include this parameter for each video you want to get. For
   * example, `id=1234&id=5678`. You may specify a maximum of 100 IDs. The
   * endpoint ignores duplicate IDs and IDs that weren't found (if there's at
   * least one valid ID).  
   *   
   * The _id_, _user\_id_, and _game\_id_ parameters are mutually exclusive.
   */
  id?: string[],
  /**
   * A filter used to filter the list of videos by the video's type. Possible
   * case-sensitive values are:  
   *   
   * * all
   * * archive — On-demand videos (VODs) of past streams.
   * * highlight — Highlight reels of past streams.
   * * upload — External videos that the broadcaster uploaded using the Video
   * Producer.
   *   
   * The default is "all," which returns all video types.  
   *   
   * Specify this parameter only if you specify the _game\_id_ or _user\_id_
   * query parameter.
   */
  type?: | "all"| "archive"| "highlight"| "upload",
  /**
   * A filter used to filter the list of videos by when they were published.
   * For example, videos published in the last week. Possible values are:  
   *   
   * * all
   * * day
   * * month
   * * week
   *   
   * The default is "all," which returns videos published in all periods.  
   *   
   * Specify this parameter only if you specify the _game\_id_ or _user\_id_
   * query parameter.
   */
  period?: | "all"| "day"| "month"| "week",
  /**
   * The order to sort the returned videos in. Possible values are:  
   *   
   * * time — Sort the results in descending order by when they were created
   * (i.e., latest video first).
   * * trending — Sort the results in descending order by biggest gains in
   * viewership (i.e., highest trending video first).
   * * views — Sort the results in descending order by most views (i.e.,
   * highest number of views first).
   *   
   * The default is "time."  
   *   
   * Specify this parameter only if you specify the _game\_id_ or _user\_id_
   * query parameter.
   */
  sort?: | "time"| "trending"| "views",
  /**
   * The ID of the user whose list of videos you want to get.  
   *   
   * The _id_, _user\_id_, and _game\_id_ parameters are mutually exclusive.
   */
  userId?: string,
  /**
   * The maximum number of items to return per page in the response. The
   * minimum page size is 1 item per page and the maximum is 100\. The default
   * is 20.  
   *   
   * Specify this parameter only if you specify the _game\_id_ or _user\_id_
   * query parameter.
   */
  first?: string,
  /**
   * The cursor used to get the next page of results. The **Pagination** object
   * in the response contains the cursor’s value. [Read
   * More](https://dev.twitch.tv/docs/api/guide#pagination)  
   *   
   * Specify this parameter only if you specify the _user\_id_ query parameter.
   */
  after?: string,
  /**
   * The cursor used to get the previous page of results. The **Pagination**
   * object in the response contains the cursor’s value. [Read
   * More](https://dev.twitch.tv/docs/api/guide#pagination)  
   *   
   * Specify this parameter only if you specify the _user\_id_ query parameter.
   */
  before?: string,
  /**
   * A category or game ID. The response contains a maximum of 500 videos that
   * show this content. To get category/game IDs, use the [Search
   * Categories](https://dev.twitch.tv/docs/api/reference#search-categories)
   * endpoint.  
   *   
   * The _id_, _user\_id_, and _game\_id_ parameters are mutually exclusive.
   */
  gameId?: string,
  /**
   * A filter used to filter the list of videos by the language that the video
   * owner broadcasts in. For example, to get videos that were broadcast in
   * German, set this parameter to the ISO 639-1 two-letter code for German
   * (i.e., DE). For a list of supported languages, see [Supported Stream
   * Language](https://help.twitch.tv/s/article/languages-on-twitch#streamlang). 
   * If the language is not supported, use “other.”
   *   
   * Specify this parameter only if you specify the _game\_id_ query parameter.
   */
  language?: string,
}
export interface DeleteVideosRequest {
  /**
   * The list of videos to delete. To specify more than one video, include the
   * _id_ parameter for each video to delete. For example, `id=1234&id=5678`.
   * You can delete a maximum of 5 videos per request. Ignores invalid video
   * IDs.  
   *   
   * If the user doesn’t have permission to delete one of the videos in the
   * list, none of the videos are deleted.
   */
  id: string[],
}
export const GetVideosResponse = z.object({
  /**
   * The list of published videos that match the filter criteria.
   */
  "data": z.object({
    "created_at": z.string(),
    "description": z.string(),
    "duration": z.string(),
    "id": z.string(),
    "language": z.string(),
    "muted_segments": z.object({
      /**
       * The duration of the muted segment, in seconds.
       */
      "duration": z.number(),
      /**
       * The offset, in seconds, from the beginning of the video to where
       * the muted segment begins.
       */
      "offset": z.number()
    }).array(),
    "published_at": z.string(),
    "stream_id": z.string(),
    "thumbnail_url": z.string(),
    "title": z.string(),
    "type": z.enum(["archive", "highlight", "upload"]),
    "url": z.string(),
    "user_id": z.string(),
    "user_login": z.string(),
    "user_name": z.string(),
    "view_count": z.number(),
    "viewable": z.string()
  }).transform((it) => ({
    /**
     * The date and time, in UTC, of when the video was created. The
     * timestamp is in RFC3339 format.
     */
    "createdAt": it["created_at"],
    /**
     * The video's description.
     */
    "description": it["description"],
    /**
     * The video's length in ISO 8601 duration format. For example, 3m21s
     * represents 3 minutes, 21 seconds.
     */
    "duration": it["duration"],
    /**
     * An ID that identifies the video.
     */
    "id": it["id"],
    /**
     * The ISO 639-1 two-letter language code that the video was broadcast
     * in. For example, the language code is DE if the video was broadcast
     * in German. For a list of supported languages, see [Supported Stream
     * Language](https://help.twitch.tv/s/article/languages-on-twitch#streamlang). 
     * The language value is "other" if the video was broadcast in a
     * language not in the list of supported languages.
     */
    "language": it["language"],
    /**
     * The segments that Twitch Audio Recognition muted; otherwise,
     * **null**.
     */
    "mutedSegments": it["muted_segments"],
    /**
     * The date and time, in UTC, of when the video was published. The
     * timestamp is in RFC3339 format.
     */
    "publishedAt": it["published_at"],
    /**
     * The ID of the stream that the video originated from if the video's
     * type is "archive;" otherwise, **null**.
     */
    "streamId": it["stream_id"],
    /**
     * A URL to a thumbnail image of the video. Before using the URL, you
     * must replace the `%{width}` and `%{height}` placeholders with the
     * width and height of the thumbnail you want returned. Due to current
     * limitations, `${width}` must be 320 and `${height}` must be 180.
     */
    "thumbnailUrl": it["thumbnail_url"],
    /**
     * The video's title.
     */
    "title": it["title"],
    /**
     * The video's type. Possible values are:  
     *   
     * * archive — An on-demand video (VOD) of one of the broadcaster's
     * past streams.
     * * highlight — A highlight reel of one of the broadcaster's past
     * streams. See [Creating
     * Highlights](https://help.twitch.tv/s/article/creating-highlights-and-stream-markers).
     * * upload — A video that the broadcaster uploaded to their video
     * library. See Upload under [Video
     * Producer](https://help.twitch.tv/s/article/video-on-demand?language=en%5FUS#videoproducer).
     */
    "type": it["type"],
    /**
     * The video's URL.
     */
    "url": it["url"],
    /**
     * The ID of the broadcaster that owns the video.
     */
    "userId": it["user_id"],
    /**
     * The broadcaster's login name.
     */
    "userLogin": it["user_login"],
    /**
     * The broadcaster's display name.
     */
    "userName": it["user_name"],
    /**
     * The number of times that users have watched the video.
     */
    "viewCount": it["view_count"],
    /**
     * The video's viewable state. Always set to **public**.
     */
    "viewable": it["viewable"],

  })).array(),
  /**
   * Contains the information used to page through the list of results.
   * The object is empty if there are no more pages left to page through.
   * [Read More](https://dev.twitch.tv/docs/api/guide#pagination)
   */
  "pagination": z.object({
    /**
     * The cursor used to get the next page of results. Use the cursor to
     * set the request's _after_ or _before_ query parameter depending on
     * whether you're paging forwards or backwards through the results.
     */
    "cursor": z.string().optional()
  }).optional()
});
export interface GetVideosResponse extends z.infer<typeof GetVideosResponse> {}

export const DeleteVideosResponse = z.object({
  /**
   * The list of IDs of the videos that were deleted.
   */
  "data": z.string().array()
});
export interface DeleteVideosResponse extends z.infer<typeof DeleteVideosResponse> {}



export class Videos {
  readonly #twitch: Twitch;

  constructor(twitch: Twitch) {
    this.#twitch = twitch;
  }

  /**
   * Gets information about one or more published videos. You may get videos by
   * ID, by user, or by game/category.
   * 
   * You may apply several filters to get a subset of the videos. The filters
   * are applied as an AND operation to each video. For example, if _language_
   * is set to ‘de’ and _game\_id_ is set to 21779, the response includes
   * only videos that show playing League of Legends by users that stream in
   * German. The filters apply only if you get videos by user ID or game ID.
   * 
   * __Authorization:__
   * 
   * Requires an [app access
   * token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or
   * [user access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens).
   */
  async getVideos(options: GetVideosRequest): Promise<GetVideosResponse> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/videos", this.#twitch.base);
    if (options.id) {
      for (const value of options.id) {
      url.searchParams.append("id", value.toString());
    }
    }
    if (options.type) {
      url.searchParams.append("type", options.type.toString());
    }
    if (options.period) {
      url.searchParams.append("period", options.period.toString());
    }
    if (options.sort) {
      url.searchParams.append("sort", options.sort.toString());
    }
    if (options.userId) {
      url.searchParams.append("user_id", options.userId.toString());
    }
    if (options.first) {
      url.searchParams.append("first", options.first.toString());
    }
    if (options.after) {
      url.searchParams.append("after", options.after.toString());
    }
    if (options.before) {
      url.searchParams.append("before", options.before.toString());
    }
    if (options.gameId) {
      url.searchParams.append("game_id", options.gameId.toString());
    }
    if (options.language) {
      url.searchParams.append("language", options.language.toString());
    }
    const opts: RequestInit = { method: 'GET' };

    return await this.#twitch.request(url, opts, GetVideosResponse);
  }
  /**
   * Deletes one or more videos. You may delete past broadcasts, highlights, or
   * uploads.
   * 
   * __Authorization:__
   * 
   * Requires a [user access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens) that
   * includes the **channel:manage:videos** scope.
   */
  async deleteVideos(options: DeleteVideosRequest): Promise<DeleteVideosResponse> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/videos", this.#twitch.base);
    for (const value of options.id) {
      url.searchParams.append("id", value.toString());
    }
    const opts: RequestInit = { method: 'DELETE' };

    return await this.#twitch.request(url, opts, DeleteVideosResponse);
  }
}
