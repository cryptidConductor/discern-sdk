
/******************************************************************************
 *
 * !!!WARNING!!!
 *
 * This file is automatically generated. Do not edit this file directly.
 *
 * This file was generated using the twitch generation script, found in the
 * `scripts/twitch` directory of the repository.
 *
 *****************************************************************************/

import type { Twitch } from "../index";
import type { TokenId } from "../types";
import { z } from "zod";

export interface SearchCategoriesRequest {
  /**
   * The maximum number of items to return per page in the response. The
   * minimum page size is 1 item per page and the maximum is 100 items per
   * page. The default is 20.
   */
  first?: number,
  /**
   * The cursor used to get the next page of results. The **Pagination** object
   * in the response contains the cursor’s value. [Read
   * More](https://dev.twitch.tv/docs/api/guide#pagination)
   */
  after?: string,
  /**
   * The URI-encoded search string. For example, encode _#archery_ as
   * `%23archery` and search strings like _angel of death_ as
   * `angel%20of%20death`.
   */
  query: string,
}
export interface SearchChannelsRequest {
  /**
   * A Boolean value that determines whether the response includes only
   * channels that are currently streaming live. Set to **true** to get only
   * channels that are streaming live; otherwise, **false** to get live and
   * offline channels. The default is **false**.
   */
  liveOnly?: boolean,
  /**
   * The cursor used to get the next page of results. The **Pagination** object
   * in the response contains the cursor’s value. [Read
   * More](https://dev.twitch.tv/docs/api/guide#pagination)
   */
  after?: string,
  /**
   * The maximum number of items to return per page in the response. The
   * minimum page size is 1 item per page and the maximum is 100 items per
   * page. The default is 20.
   */
  first?: number,
  /**
   * The URI-encoded search string. For example, encode search strings like
   * _angel of death_ as `angel%20of%20death`.
   */
  query: string,
}
export const SearchCategoriesResponse = z.object({
  /**
   * The list of games or categories that match the query. The list is
   * empty if there are no matches.
   */
  "data": z.object({
    "box_art_url": z.string(),
    "id": z.string(),
    "name": z.string()
  }).transform((it) => ({
    /**
     * A URL to an image of the game’s box art or streaming category.
     */
    "boxArtUrl": it["box_art_url"],
    /**
     * An ID that uniquely identifies the game or category.
     */
    "id": it["id"],
    /**
     * The name of the game or category.
     */
    "name": it["name"],

  })).array()
});
export interface SearchCategoriesResponse extends z.infer<typeof SearchCategoriesResponse> {}

export const SearchChannelsResponse = z.object({
  /**
   * The list of channels that match the query. The list is empty if there
   * are no matches.
   */
  "data": z.object({
    "broadcaster_language": z.string(),
    "broadcaster_login": z.string(),
    "display_name": z.string(),
    "game_id": z.string(),
    "game_name": z.string(),
    "id": z.string(),
    "is_live": z.boolean(),
    "started_at": z.string(),
    "tag_ids": z.string().array(),
    "tags": z.string().array(),
    "thumbnail_url": z.string(),
    "title": z.string()
  }).transform((it) => ({
    /**
     * The ISO 639-1 two-letter language code of the language used by the
     * broadcaster. For example, _en_ for English. If the broadcaster uses
     * a language not in the list of [supported stream
     * languages](https://help.twitch.tv/s/article/languages-on-twitch#streamlang), 
     * the value is _other_.
     */
    "broadcasterLanguage": it["broadcaster_language"],
    /**
     * The broadcaster’s login name.
     */
    "broadcasterLogin": it["broadcaster_login"],
    /**
     * The broadcaster’s display name.
     */
    "displayName": it["display_name"],
    /**
     * The ID of the game that the broadcaster is playing or last played.
     */
    "gameId": it["game_id"],
    /**
     * The name of the game that the broadcaster is playing or last
     * played.
     */
    "gameName": it["game_name"],
    /**
     * An ID that uniquely identifies the channel (this is the
     * broadcaster’s ID).
     */
    "id": it["id"],
    /**
     * A Boolean value that determines whether the broadcaster is
     * streaming live. Is **true** if the broadcaster is streaming live;
     * otherwise, **false**.
     */
    "isLive": it["is_live"],
    /**
     * The UTC date and time (in RFC3339 format) of when the broadcaster
     * started streaming. The string is empty if the broadcaster is not
     * streaming live.
     */
    "startedAt": it["started_at"],
    /**
     * **IMPORTANT** As of February 28, 2023, this field is deprecated and
     * returns only an empty array. If you use this field, please update
     * your code to use the `tags` field.  
     *   
     * The list of tags that apply to the stream. The list contains IDs
     * only when the channel is steaming live. For a list of possible
     * tags, see [List of All
     * Tags](https://www.twitch.tv/directory/all/tags). The list doesn’t
     * include Category Tags.
     */
    "tagIds": it["tag_ids"],
    /**
     * The tags applied to the channel.
     */
    "tags": it["tags"],
    /**
     * A URL to a thumbnail of the broadcaster’s profile image.
     */
    "thumbnailUrl": it["thumbnail_url"],
    /**
     * The stream’s title. Is an empty string if the broadcaster
     * didn’t set it.
     */
    "title": it["title"],

  })).array()
});
export interface SearchChannelsResponse extends z.infer<typeof SearchChannelsResponse> {}



export class Search {
  readonly #twitch: Twitch;

  constructor(twitch: Twitch) {
    this.#twitch = twitch;
  }

  /**
   * Gets the games or categories that match the specified query.
   * 
   * To match, the category’s name must contain all parts of the query
   * string. For example, if the query string is 42, the response includes any
   * category name that contains 42 in the title. If the query string is a
   * phrase like _love computer_, the response includes any category name that
   * contains the words love and computer anywhere in the name. The comparison
   * is case insensitive.
   * 
   * __Authorization:__
   * 
   * Requires an [app access
   * token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or
   * [user access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens).
   */
  async searchCategories(options: SearchCategoriesRequest): Promise<SearchCategoriesResponse> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/search/categories", this.#twitch.base);
    if (options.first) {
      url.searchParams.append("first", options.first.toString());
    }
    if (options.after) {
      url.searchParams.append("after", options.after.toString());
    }
    url.searchParams.append("query", options.query.toString());
    const opts: RequestInit = { method: 'GET' };

    return await this.#twitch.request(url, opts, SearchCategoriesResponse);
  }
  /**
   * Gets the channels that match the specified query and have streamed content
   * within the past 6 months.
   * 
   * The fields that the API uses for comparison depends on the value that the
   * _live\_only_ query parameter is set to. If _live\_only_ is **false**, the
   * API matches on the broadcaster’s login name. However, if _live\_only_ is
   * **true**, the API matches on the broadcaster’s name and category name.
   * 
   * To match, the beginning of the broadcaster’s name or category must match
   * the query string. The comparison is case insensitive. If the query string
   * is angel\_of\_death, it matches all names that begin with
   * angel\_of\_death. However, if the query string is a phrase like _angel of
   * death_, it matches to names starting with angelofdeath or names starting
   * with angel\_of\_death.
   * 
   * By default, the results include both live and offline channels. To get
   * only live channels set the _live\_only_ query parameter to **true**.
   * 
   * __Authorization:__
   * 
   * Requires an [app access
   * token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or
   * [user access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens).
   */
  async searchChannels(options: SearchChannelsRequest): Promise<SearchChannelsResponse> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/search/channels", this.#twitch.base);
    if (options.liveOnly) {
      url.searchParams.append("live_only", options.liveOnly.toString());
    }
    if (options.after) {
      url.searchParams.append("after", options.after.toString());
    }
    if (options.first) {
      url.searchParams.append("first", options.first.toString());
    }
    url.searchParams.append("query", options.query.toString());
    const opts: RequestInit = { method: 'GET' };

    return await this.#twitch.request(url, opts, SearchChannelsResponse);
  }
}
