
/******************************************************************************
 *
 * !!!WARNING!!!
 *
 * This file is automatically generated. Do not edit this file directly.
 *
 * This file was generated using the twitch generation script, found in the
 * `scripts/twitch` directory of the repository.
 *
 *****************************************************************************/

import type { Twitch } from "../index";
import type { TokenId } from "../types";
import { z } from "zod";

export interface StartARaidRequest {
  /**
   * The ID of the broadcaster to raid.
   */
  toBroadcasterId?: string,
}
export const StartARaidResponse = z.object({
  /**
   * A list that contains a single object with information about the
   * pending raid.
   */
  "data": z.object({
    "created_at": z.string(),
    "is_mature": z.boolean()
  }).transform((it) => ({
    /**
     * The UTC date and time, in RFC3339 format, of when the raid was
     * requested.
     */
    "createdAt": it["created_at"],
    /**
     * A Boolean value that indicates whether the channel being raided
     * contains mature content.
     */
    "isMature": it["is_mature"],

  })).array()
});
export interface StartARaidResponse extends z.infer<typeof StartARaidResponse> {}



export class Raids {
  readonly #twitch: Twitch;

  constructor(twitch: Twitch) {
    this.#twitch = twitch;
  }

  /**
   * Raid another channel by sending the broadcasterâ€™s viewers to the
   * targeted channel.
   * 
   * When you call the API from a chat bot or extension, the Twitch UX pops up
   * a window at the top of the chat room that identifies the number of viewers
   * in the raid. The raid occurs when the broadcaster clicks **Raid Now** or
   * after the 90-second countdown expires.
   * 
   * To determine whether the raid successfully occurred, you must subscribe to
   * the [Channel
   * Raid](https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types#channelraid) 
   * event. For more information, see [Get notified when a raid
   * begins](https://dev.twitch.tv/docs/api/raids#get-notified-when-a-raid-begins).
   * 
   * To cancel a pending raid, use the [Cancel a
   * raid](https://dev.twitch.tv/docs/api/reference#cancel-a-raid) endpoint.
   * 
   * **Rate Limit**: The limit is 10 requests within a 10-minute window.
   * 
   * __Authorization:__
   * 
   * Requires a [user access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens) that
   * includes the **channel:manage:raids** scope.
   */
  async startARaid(options: StartARaidRequest): Promise<StartARaidResponse> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/raids", this.#twitch.base);
    url.searchParams.append("from_broadcaster_id", snapshot.userId);
    if (options.toBroadcasterId) {
      url.searchParams.append("to_broadcaster_id", options.toBroadcasterId.toString());
    }
    const opts: RequestInit = { method: 'POST' };

    return await this.#twitch.request(url, opts, StartARaidResponse);
  }
  /**
   * Cancel a pending raid.
   * 
   * You can cancel a raid at any point up until the broadcaster clicks **Raid
   * Now** in the Twitch UX or the 90-second countdown expires.
   * 
   * **Rate Limit**: The limit is 10 requests within a 10-minute window.
   * 
   * __Authorization:__
   * 
   * Requires a [user access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens) that
   * includes the **channel:manage:raids** scope.
   */
  async cancelARaid(): Promise<void> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/raids", this.#twitch.base);
    url.searchParams.append("broadcaster_id", snapshot.userId);
    const opts: RequestInit = { method: 'DELETE' };

    await this.#twitch.request(url, opts);
  }
}
