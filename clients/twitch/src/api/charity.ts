
/******************************************************************************
 *
 * !!!WARNING!!!
 *
 * This file is automatically generated. Do not edit this file directly.
 *
 * This file was generated using the twitch generation script, found in the
 * `scripts/twitch` directory of the repository.
 *
 *****************************************************************************/

import type { Twitch } from "../index";
import type { TokenId } from "../types";
import { z } from "zod";

export interface GetCharityCampaignDonationsRequest {
  /**
   * The maximum number of items to return per page in the response. The
   * minimum page size is 1 item per page and the maximum is 100\. The default
   * is 20.
   */
  first?: number,
  /**
   * The cursor used to get the next page of results. The **Pagination** object
   * in the response contains the cursor’s value. [Read
   * More](https://dev.twitch.tv/docs/api/guide#pagination)
   */
  after?: string,
}
export const GetCharityCampaignResponse = z.object({
  /**
   * A list that contains the charity campaign that the broadcaster is
   * currently running. The list is empty if the broadcaster is not
   * running a charity campaign; the campaign information is not available
   * after the campaign ends.
   */
  "data": z.object({
    "broadcaster_id": z.string(),
    "broadcaster_login": z.string(),
    "broadcaster_name": z.string(),
    "charity_description": z.string(),
    "charity_logo": z.string(),
    "charity_name": z.string(),
    "charity_website": z.string(),
    "current_amount": z.object({
      "currency": z.string(),
      "decimal_places": z.number(),
      "value": z.number()
    }).transform((it) => ({
      /**
       * The ISO-4217 three-letter currency code that identifies the type
       * of currency in `value`.
       */
      "currency": it["currency"],
      /**
       * The number of decimal places used by the currency. For example,
       * USD uses two decimal places. Use this number to translate `value`
       * from minor units to major units by using the formula:  
       *   
       * `value / 10^decimal_places`
       */
      "decimalPlaces": it["decimal_places"],
      /**
       * The monetary amount. The amount is specified in the currency’s
       * minor unit. For example, the minor units for USD is cents, so if
       * the amount is $5.50 USD, `value` is set to 550.
       */
      "value": it["value"],

    })),
    "id": z.string(),
    "target_amount": z.object({
      "currency": z.string(),
      "decimal_places": z.number(),
      "value": z.number()
    }).transform((it) => ({
      /**
       * The ISO-4217 three-letter currency code that identifies the type
       * of currency in `value`.
       */
      "currency": it["currency"],
      /**
       * The number of decimal places used by the currency. For example,
       * USD uses two decimal places. Use this number to translate `value`
       * from minor units to major units by using the formula:  
       *   
       * `value / 10^decimal_places`
       */
      "decimalPlaces": it["decimal_places"],
      /**
       * The monetary amount. The amount is specified in the currency’s
       * minor unit. For example, the minor units for USD is cents, so if
       * the amount is $5.50 USD, `value` is set to 550.
       */
      "value": it["value"],

    }))
  }).transform((it) => ({
    /**
     * An ID that identifies the broadcaster that’s running the
     * campaign.
     */
    "broadcasterId": it["broadcaster_id"],
    /**
     * The broadcaster’s login name.
     */
    "broadcasterLogin": it["broadcaster_login"],
    /**
     * The broadcaster’s display name.
     */
    "broadcasterName": it["broadcaster_name"],
    /**
     * A description of the charity.
     */
    "charityDescription": it["charity_description"],
    /**
     * A URL to an image of the charity’s logo. The image’s type is
     * PNG and its size is 100px X 100px.
     */
    "charityLogo": it["charity_logo"],
    /**
     * The charity’s name.
     */
    "charityName": it["charity_name"],
    /**
     * A URL to the charity’s website.
     */
    "charityWebsite": it["charity_website"],
    /**
     * The current amount of donations that the campaign has received.
     */
    "currentAmount": it["current_amount"],
    /**
     * An ID that identifies the charity campaign.
     */
    "id": it["id"],
    /**
     * The campaign’s fundraising goal. This field is **null** if the
     * broadcaster has not defined a fundraising goal.
     */
    "targetAmount": it["target_amount"],

  })).array()
});
export interface GetCharityCampaignResponse extends z.infer<typeof GetCharityCampaignResponse> {}

export const GetCharityCampaignDonationsResponse = z.object({
  /**
   * A list that contains the donations that users have made to the
   * broadcaster’s charity campaign. The list is empty if the
   * broadcaster is not currently running a charity campaign; the donation
   * information is not available after the campaign ends.
   */
  "data": z.object({
    "amount": z.object({
      "currency": z.string(),
      "decimal_places": z.number(),
      "value": z.number()
    }).transform((it) => ({
      /**
       * The ISO-4217 three-letter currency code that identifies the type
       * of currency in `value`.
       */
      "currency": it["currency"],
      /**
       * The number of decimal places used by the currency. For example,
       * USD uses two decimal places. Use this number to translate `value`
       * from minor units to major units by using the formula:  
       *   
       * `value / 10^decimal_places`
       */
      "decimalPlaces": it["decimal_places"],
      /**
       * The monetary amount. The amount is specified in the currency’s
       * minor unit. For example, the minor units for USD is cents, so if
       * the amount is $5.50 USD, `value` is set to 550.
       */
      "value": it["value"],

    })),
    "campaign_id": z.string(),
    "id": z.string(),
    "user_id": z.string(),
    "user_login": z.string(),
    "user_name": z.string()
  }).transform((it) => ({
    /**
     * An object that contains the amount of money that the user donated.
     */
    "amount": it["amount"],
    /**
     * An ID that identifies the charity campaign that the donation
     * applies to.
     */
    "campaignId": it["campaign_id"],
    /**
     * An ID that identifies the donation. The ID is unique across
     * campaigns.
     */
    "id": it["id"],
    /**
     * An ID that identifies a user that donated money to the campaign.
     */
    "userId": it["user_id"],
    /**
     * The user’s login name.
     */
    "userLogin": it["user_login"],
    /**
     * The user’s display name.
     */
    "userName": it["user_name"],

  })).array(),
  /**
   * An object that contains the information used to page through the list
   * of results. The object is empty if there are no more pages left to
   * page through. [Read
   * More](https://dev.twitch.tv/docs/api/guide#pagination)
   */
  "pagination": z.object({
    /**
     * The cursor used to get the next page of results. Use the cursor to
     * set the request’s _after_ query parameter.
     */
    "cursor": z.string().optional()
  }).optional()
});
export interface GetCharityCampaignDonationsResponse extends z.infer<typeof GetCharityCampaignDonationsResponse> {}



export class Charity {
  readonly #twitch: Twitch;

  constructor(twitch: Twitch) {
    this.#twitch = twitch;
  }

  /**
   * Gets information about the charity campaign that a broadcaster is running.
   * For example, the campaign’s fundraising goal and the current amount of
   * donations.
   * 
   * To receive events when progress is made towards the campaign’s goal or
   * the broadcaster changes the fundraising goal, subscribe to the
   * [channel.charity\_campaign.progress](https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types#channelcharity%5Fcampaignprogress) 
   * subscription type.
   * 
   * __Authorization:__
   * 
   * Requires a [user access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens) that
   * includes the **channel:read:charity** scope.
   */
  async getCharityCampaign(): Promise<GetCharityCampaignResponse> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/charity/campaigns", this.#twitch.base);
    url.searchParams.append("broadcaster_id", snapshot.userId);
    const opts: RequestInit = { method: 'GET' };

    return await this.#twitch.request(url, opts, GetCharityCampaignResponse);
  }
  /**
   * Gets the list of donations that users have made to the broadcaster’s
   * active charity campaign.
   * 
   * To receive events as donations occur, subscribe to the
   * [channel.charity\_campaign.donate](https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types#channelcharity%5Fcampaigndonate) 
   * subscription type.
   * 
   * __Authorization:__
   * 
   * Requires a user access token that includes the **channel:read:charity**
   * scope.
   */
  async getCharityCampaignDonations(options: GetCharityCampaignDonationsRequest): Promise<GetCharityCampaignDonationsResponse> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/charity/donations", this.#twitch.base);
    url.searchParams.append("broadcaster_id", snapshot.userId);
    if (options.first) {
      url.searchParams.append("first", options.first.toString());
    }
    if (options.after) {
      url.searchParams.append("after", options.after.toString());
    }
    const opts: RequestInit = { method: 'GET' };

    return await this.#twitch.request(url, opts, GetCharityCampaignDonationsResponse);
  }
}
