
/******************************************************************************
 *
 * !!!WARNING!!!
 *
 * This file is automatically generated. Do not edit this file directly.
 *
 * This file was generated using the twitch generation script, found in the
 * `scripts/twitch` directory of the repository.
 *
 *****************************************************************************/

import type { Twitch } from "../index";
import type { TokenId } from "../types";
import { z } from "zod";

export interface GetDropsEntitlementsRequest {
  /**
   * An ID that identifies a user that was granted entitlements.
   */
  userId?: string,
  /**
   * The cursor used to get the next page of results. The **Pagination** object
   * in the response contains the cursor’s value. [Read
   * More](https://dev.twitch.tv/docs/api/guide#pagination)
   */
  after?: string,
  /**
   * An ID that identifies a game that offered entitlements.
   */
  gameId?: string,
  /**
   * The maximum number of entitlements to return per page in the response. The
   * minimum page size is 1 entitlement per page and the maximum is 1000\. The
   * default is 20.
   */
  first?: number,
  /**
   * An ID that identifies the entitlement to get. Include this parameter for
   * each entitlement you want to get. For example, `id=1234&id=5678`. You may
   * specify a maximum of 100 IDs.
   */
  id?: string[],
  /**
   * The entitlement’s fulfillment status. Used to filter the list to only
   * those with the specified status. Possible values are:   
   *   
   * * CLAIMED
   * * FULFILLED
   */
  fulfillmentStatus?: | "CLAIMED"| "FULFILLED",
}
export interface UpdateDropsEntitlementsRequest {
  /**
   * The fulfillment status to set the entitlements to. Possible values are:  
   *   
   * * CLAIMED — The user claimed the benefit.
   * * FULFILLED — The developer granted the benefit that the user claimed.
   */
  fulfillmentStatus?: | "CLAIMED"| "FULFILLED",
  /**
   * A list of IDs that identify the entitlements to update. You may specify a
   * maximum of 100 IDs.
   */
  entitlementIds?: string[],
}
export const GetDropsEntitlementsResponse = z.object({
  /**
   * The list of entitlements.
   */
  "data": z.object({
    "benefit_id": z.string(),
    "fulfillment_status": z.enum(["CLAIMED", "FULFILLED"]),
    "game_id": z.string(),
    "id": z.string(),
    "last_updated": z.string(),
    "timestamp": z.string(),
    "user_id": z.string()
  }).transform((it) => ({
    /**
     * An ID that identifies the benefit (reward).
     */
    "benefitId": it["benefit_id"],
    /**
     * The entitlement’s fulfillment status. Possible values are:   
     *   
     * * CLAIMED
     * * FULFILLED
     */
    "fulfillmentStatus": it["fulfillment_status"],
    /**
     * An ID that identifies the game the user was playing when the reward
     * was entitled.
     */
    "gameId": it["game_id"],
    /**
     * An ID that identifies the entitlement.
     */
    "id": it["id"],
    /**
     * The UTC date and time (in RFC3339 format) of when the entitlement
     * was last updated.
     */
    "lastUpdated": it["last_updated"],
    /**
     * The UTC date and time (in RFC3339 format) of when the entitlement
     * was granted.
     */
    "timestamp": it["timestamp"],
    /**
     * An ID that identifies the user who was granted the entitlement.
     */
    "userId": it["user_id"],

  })).array(),
  /**
   * The information used to page through the list of results. The object
   * is empty if there are no more pages left to page through. [Read
   * More](https://dev.twitch.tv/docs/api/guide#pagination)
   */
  "pagination": z.object({
    /**
     * The cursor used to get the next page of results. Set the
     * request’s _after_ query parameter to this value to page forward
     * through the results.
     */
    "cursor": z.string().optional()
  }).optional()
});
export interface GetDropsEntitlementsResponse extends z.infer<typeof GetDropsEntitlementsResponse> {}

export const UpdateDropsEntitlementsResponse = z.object({
  /**
   * A list that indicates which entitlements were successfully updated
   * and those that weren’t.
   */
  "data": z.object({
    /**
     * The list of entitlements that the status in the `status` field
     * applies to.
     */
    "ids": z.string().array(),
    /**
     * A string that indicates whether the status of the entitlements in
     * the `ids` field were successfully updated. Possible values are:  
     *   
     * * INVALID\_ID — The entitlement IDs in the `ids` field are not
     * valid.
     * * NOT\_FOUND — The entitlement IDs in the `ids` field were not
     * found.
     * * SUCCESS — The status of the entitlements in the `ids` field
     * were successfully updated.
     * * UNAUTHORIZED — The user or organization identified by the user
     * access token is not authorized to update the entitlements.
     * * UPDATE\_FAILED — The update failed. These are considered
     * transient errors and the request should be retried later.
     */
    "status": z.enum(["INVALID_ID", "NOT_FOUND", "SUCCESS", "UNAUTHORIZED", "UPDATE_FAILED"])
  }).array()
});
export interface UpdateDropsEntitlementsResponse extends z.infer<typeof UpdateDropsEntitlementsResponse> {}



export class Entitlements {
  readonly #twitch: Twitch;

  constructor(twitch: Twitch) {
    this.#twitch = twitch;
  }

  /**
   * Gets an organization’s list of entitlements that have been granted to a
   * game, a user, or both.
   * 
   * **NOTE:** Entitlements returned in the response body data are not
   * guaranteed to be sorted by any field returned by the API. To retrieve
   * **CLAIMED** or **FULFILLED** entitlements, use the `fulfillment_status`
   * query parameter to filter results. To retrieve entitlements for a specific
   * game, use the `game_id` query parameter to filter results.
   * 
   * The following table identifies the request parameters that you may specify
   * based on the type of access token used.
   * 
   * | Access token type | Parameter | Description |
   * | - | - | - |
   * | App | None | If you don’t specify request parameters, the request
   * returns all entitlements that your organization owns. |
   * | App | user_id | The request returns all entitlements for any game that
   * the organization granted to the specified user. |
   * | App | user_id, game_id | The request returns all entitlements that the
   * specified game granted to the specified user. |
   * | App | game_id | The request returns all entitlements that the specified
   * game granted to all entitled users. |
   * | User | None | If you don’t specify request parameters, the request
   * returns all entitlements for any game that the organization granted to the
   * user identified in the access token. |
   * | User | user_id | Invalid. |
   * | User | user_id, game_id | Invalid. |
   * | User | game_id | The request returns all entitlements that the specified
   * game granted to the user identified in the access token. |
   * 
   * 
   * __Authorization:__
   * 
   * Requires an [app access
   * token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or
   * [user access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens). The
   * client ID in the access token must own the game.
   */
  async getDropsEntitlements(options: GetDropsEntitlementsRequest): Promise<GetDropsEntitlementsResponse> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/entitlements/drops", this.#twitch.base);
    if (options.userId) {
      url.searchParams.append("user_id", options.userId.toString());
    }
    if (options.after) {
      url.searchParams.append("after", options.after.toString());
    }
    if (options.gameId) {
      url.searchParams.append("game_id", options.gameId.toString());
    }
    if (options.first) {
      url.searchParams.append("first", options.first.toString());
    }
    if (options.id) {
      for (const value of options.id) {
      url.searchParams.append("id", value.toString());
    }
    }
    if (options.fulfillmentStatus) {
      url.searchParams.append("fulfillment_status", options.fulfillmentStatus.toString());
    }
    const opts: RequestInit = { method: 'GET' };

    return await this.#twitch.request(url, opts, GetDropsEntitlementsResponse);
  }
  /**
   * Updates the Drop entitlement’s fulfillment status.
   * 
   * The following table identifies which entitlements are updated based on the
   * type of access token used.
   * 
   * | Access token type | Data that’s updated |
   * | - | - |
   * | App | Updates all entitlements with benefits owned by the organization
   * in the access token. |
   * | User | Updates all entitlements owned by the user in the access token
   * and where the benefits are owned by the organization in the access token.
   * |
   * 
   * 
   * __Authorization:__
   * 
   * Requires an [app access
   * token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or
   * [user access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens). The
   * client ID in the access token must own the game.
   */
  async updateDropsEntitlements(options: UpdateDropsEntitlementsRequest): Promise<UpdateDropsEntitlementsResponse> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/entitlements/drops", this.#twitch.base);
    const opts: RequestInit = { method: 'PATCH' };

    const body: Record<string, unknown> = {};

    body.fulfillment_status = options.fulfillmentStatus;
    body.entitlement_ids = options.entitlementIds;
    opts.body = JSON.stringify(body);
    return await this.#twitch.request(url, opts, UpdateDropsEntitlementsResponse);
  }
}
