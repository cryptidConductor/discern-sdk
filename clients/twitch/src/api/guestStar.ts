
/******************************************************************************
 *
 * !!!WARNING!!!
 *
 * This file is automatically generated. Do not edit this file directly.
 *
 * This file was generated using the twitch generation script, found in the
 * `scripts/twitch` directory of the repository.
 *
 *****************************************************************************/

import type { Twitch } from "../index";
import type { TokenId } from "../types";
import { z } from "zod";

export interface GetChannelGuestStarSettingsRequest {
  /**
   * The ID of the broadcaster you want to get guest star settings for.
   */
  broadcasterId: string,
}
export interface UpdateChannelGuestStarSettingsRequest {
  /**
   * This setting determines how the guests within a session should be laid out
   * within the browser source. Can be one of the following values:   
   *   
   * * `TILED_LAYOUT`: All live guests are tiled within the browser source with
   * the same size.
   * * `SCREENSHARE_LAYOUT`: All live guests are tiled within the browser
   * source with the same size. If there is an active screen share, it is sized
   * larger than the other guests.
   * * `HORIZONTAL_LAYOUT`: All live guests are arranged in a horizontal bar
   * within the browser source
   * * `VERTICAL_LAYOUT`: All live guests are arranged in a vertical bar within
   * the browser source
   */
  groupLayout?: | "TILED_LAYOUT"| "SCREENSHARE_LAYOUT"| "HORIZONTAL_LAYOUT"| "VERTICAL_LAYOUT",
  /**
   * The ID of the broadcaster you want to update Guest Star settings for.
   */
  broadcasterId: string,
  /**
   * Flag determining if Browser Sources subscribed to sessions on this channel
   * should output audio
   */
  isBrowserSourceAudioEnabled?: boolean,
  /**
   * Flag determining if Guest Star moderators have access to control whether a
   * guest is live once assigned to a slot.
   */
  isModeratorSendLiveEnabled?: boolean,
  /**
   * Flag determining if Guest Star should regenerate the auth token associated
   * with the channel’s browser sources. Providing a true value for this will
   * immediately invalidate all browser sources previously configured in your
   * streaming software.
   */
  regenerateBrowserSources?: boolean,
  /**
   * Number of slots the Guest Star call interface will allow the host to add
   * to a call. Required to be between 1 and 6.
   */
  slotCount?: number,
}
export interface GetGuestStarInvitesRequest {
  /**
   * The ID of the broadcaster running the Guest Star session.
   */
  broadcasterId: string,
  /**
   * The session ID to query for invite status.
   */
  sessionId: string,
  /**
   * The ID of the broadcaster or a user that has permission to moderate the
   * broadcaster’s chat room. This ID must match the `user_id` in the user
   * access token.
   */
  moderatorId: string,
}
export interface SendGuestStarInviteRequest {
  /**
   * The ID of the broadcaster running the Guest Star session.
   */
  broadcasterId: string,
  /**
   * The ID of the broadcaster or a user that has permission to moderate the
   * broadcaster’s chat room. This ID must match the `user_id` in the user
   * access token.
   */
  moderatorId: string,
  /**
   * The session ID for the invite to be sent on behalf of the broadcaster.
   */
  sessionId: string,
  /**
   * Twitch User ID for the guest to invite to the Guest Star session.
   */
  guestId: string,
}
export interface DeleteGuestStarInviteRequest {
  /**
   * Twitch User ID for the guest to revoke the Guest Star session invite from.
   */
  guestId: string,
  /**
   * The ID of the session for the invite to be revoked on behalf of the
   * broadcaster.
   */
  sessionId: string,
  /**
   * The ID of the broadcaster running the Guest Star session.
   */
  broadcasterId: string,
  /**
   * The ID of the broadcaster or a user that has permission to moderate the
   * broadcaster’s chat room. This ID must match the `user_id` in the user
   * access token.
   */
  moderatorId: string,
}
export interface GetGuestStarSessionRequest {
  /**
   * ID for the user hosting the Guest Star session.
   */
  broadcasterId: string,
}
export interface CreateGuestStarSessionRequest {
  /**
   * The ID of the broadcaster you want to create a Guest Star session for.
   * Provided `broadcaster_id` must match the `user_id` in the auth token.
   */
  broadcasterId: string,
}
export interface EndGuestStarSessionRequest {
  /**
   * The ID of the broadcaster you want to end a Guest Star session for.
   * Provided `broadcaster_id` must match the `user_id` in the auth token.
   */
  broadcasterId: string,
  /**
   * ID for the session to end on behalf of the broadcaster.
   */
  sessionId: string,
}
export interface AssignGuestStarSlotRequest {
  /**
   * The ID of the broadcaster running the Guest Star session.
   */
  broadcasterId: string,
  /**
   * The ID of the broadcaster or a user that has permission to moderate the
   * broadcaster’s chat room. This ID must match the `user_id` in the user
   * access token.
   */
  moderatorId: string,
  /**
   * The Twitch User ID corresponding to the guest to assign a slot in the
   * session. This user must already have an invite to this session, and have
   * indicated that they are ready to join.
   */
  guestId: string,
  /**
   * The ID of the Guest Star session in which to assign the slot.
   */
  sessionId: string,
  /**
   * The slot assignment to give to the user. Must be a numeric identifier
   * between “1” and “N” where N is the max number of slots for the
   * session. Max number of slots allowed for the session is reported by [Get
   * Channel Guest Star
   * Settings](https://dev.twitch.tv/docs/api/reference#get-channel-guest-star-settings).
   */
  slotId: string,
}
export interface DeleteGuestStarSlotRequest {
  /**
   * The ID of the broadcaster running the Guest Star session.
   */
  broadcasterId: string,
  /**
   * Flag signaling that the guest should be reinvited to the session, sending
   * them back to the invite queue.
   */
  shouldReinviteGuest?: string,
  /**
   * The slot ID representing the slot assignment to remove from the session.
   */
  slotId: string,
  /**
   * The ID of the Guest Star session in which to remove the slot assignment.
   */
  sessionId: string,
  /**
   * The Twitch User ID corresponding to the guest to remove from the session.
   */
  guestId: string,
}
export interface UpdateGuestStarSlotRequest {
  /**
   * The ID of the broadcaster running the Guest Star session.
   */
  broadcasterId: string,
  /**
   * The ID of the Guest Star session in which to update slot settings.
   */
  sessionId: string,
  /**
   * The slot to move this user assignment to. If the destination slot is
   * occupied, the user assigned will be swapped into `source_slot_id`.
   */
  destinationSlotId?: string,
  /**
   * The slot assignment previously assigned to a user.
   */
  sourceSlotId: string,
  /**
   * The ID of the broadcaster or a user that has permission to moderate the
   * broadcaster’s chat room. This ID must match the `user_id` in the user
   * access token.
   */
  moderatorId: string,
}
export interface UpdateGuestStarSlotSettingsRequest {
  /**
   * The ID of the broadcaster running the Guest Star session.
   */
  broadcasterId: string,
  /**
   * Flag indicating whether the slot is allowed to share their audio with the
   * rest of the session. If false, the slot will be muted in any views
   * containing the slot.
   */
  isAudioEnabled?: boolean,
  /**
   * Flag indicating whether the user assigned to this slot is visible/can be
   * heard from any public subscriptions. Generally, this determines whether or
   * not the slot is enabled in any broadcasting software integrations.
   */
  isLive?: boolean,
  /**
   * The ID of the Guest Star session in which to update a slot’s settings.
   */
  sessionId: string,
  /**
   * The slot assignment that has previously been assigned to a user.
   */
  slotId: string,
  /**
   * Flag indicating whether the slot is allowed to share their video with the
   * rest of the session. If false, the slot will have no video shared in any
   * views containing the slot.
   */
  isVideoEnabled?: boolean,
  /**
   * Value from 0-100 that controls the audio volume for shared views
   * containing the slot.
   */
  volume?: number,
}
export const GetChannelGuestStarSettingsResponse = z.object({
  "browser_source_token": z.string(),
  "group_layout": z.enum(["TILED_LAYOUT", "SCREENSHARE_LAYOUT"]),
  "is_browser_source_audio_enabled": z.boolean(),
  "is_moderator_send_live_enabled": z.boolean(),
  "slot_count": z.number()
}).transform((it) => ({
  /**
   * View only token to generate browser source URLs
   */
  "browserSourceToken": it["browser_source_token"],
  /**
   * This setting determines how the guests within a session should be
   * laid out within the browser source. Can be one of the following
   * values:   
   *   
   * * `TILED_LAYOUT`: All live guests are tiled within the browser source
   * with the same size.
   * * `SCREENSHARE_LAYOUT`: All live guests are tiled within the browser
   * source with the same size. If there is an active screen share, it is
   * sized larger than the other guests.
   */
  "groupLayout": it["group_layout"],
  /**
   * Flag determining if Browser Sources subscribed to sessions on this
   * channel should output audio
   */
  "isBrowserSourceAudioEnabled": it["is_browser_source_audio_enabled"],
  /**
   * Flag determining if Guest Star moderators have access to control
   * whether a guest is live once assigned to a slot.
   */
  "isModeratorSendLiveEnabled": it["is_moderator_send_live_enabled"],
  /**
   * Number of slots the Guest Star call interface will allow the host to
   * add to a call. Required to be between 1 and 6.
   */
  "slotCount": it["slot_count"],

}));
export interface GetChannelGuestStarSettingsResponse extends z.infer<typeof GetChannelGuestStarSettingsResponse> {}

export const GetGuestStarInvitesResponse = z.object({
  /**
   * A list of invite objects describing the invited user as well as their
   * ready status.
   */
  "data": z.object({
    "invited_at": z.string(),
    "is_audio_available": z.boolean(),
    "is_audio_enabled": z.boolean(),
    "is_video_available": z.boolean(),
    "is_video_enabled": z.boolean(),
    "status": z.string(),
    "user_id": z.string()
  }).transform((it) => ({
    /**
     * Timestamp when this user was invited to the session.
     */
    "invitedAt": it["invited_at"],
    /**
     * Flag signaling that the invited user has an audio device available
     * for sharing.
     */
    "isAudioAvailable": it["is_audio_available"],
    /**
     * Flag signaling that the invited user has chosen to disable their
     * local audio device. The user has muted themselves, but they may
     * choose to unmute their audio feed upon joining the session.
     */
    "isAudioEnabled": it["is_audio_enabled"],
    /**
     * Flag signaling that the invited user has a video device available
     * for sharing.
     */
    "isVideoAvailable": it["is_video_available"],
    /**
     * Flag signaling that the invited user has chosen to disable their
     * local video device. The user has hidden themselves, but they may
     * choose to reveal their video feed upon joining the session.
     */
    "isVideoEnabled": it["is_video_enabled"],
    /**
     * Status representing the invited user’s join state. Can be one of
     * the following:   
     *   
     * * `INVITED`: The user has been invited to the session but has not
     * acknowledged it.
     * * `ACCEPTED`: The invited user has acknowledged the invite and
     * joined the waiting room, but may still be setting up their media
     * devices or otherwise preparing to join the call.
     * * `READY`: The invited user has signaled they are ready to join the
     * call from the waiting room.
     */
    "status": it["status"],
    /**
     * Twitch User ID corresponding to the invited guest
     */
    "userId": it["user_id"],

  })).array()
});
export interface GetGuestStarInvitesResponse extends z.infer<typeof GetGuestStarInvitesResponse> {}

export const GetGuestStarSessionResponse = z.object({
  /**
   * Summary of the session details
   */
  "data": z.object({
    /**
     * List of guests currently interacting with the Guest Star session.
     */
    "guests": z.object({
      "assigned_at": z.string(),
      "audio_settings": z.object({
        "is_available": z.boolean(),
        "is_guest_enabled": z.boolean(),
        "is_host_enabled": z.boolean()
      }).transform((it) => ({
        /**
         * Flag determining whether the guest has an appropriate audio
         * device available to be transmitted to the session.
         */
        "isAvailable": it["is_available"],
        /**
         * Flag determining whether the guest is allowing their audio to
         * be transmitted to the session.
         */
        "isGuestEnabled": it["is_guest_enabled"],
        /**
         * Flag determining whether the host is allowing the guest’s
         * audio to be seen or heard within the session.
         */
        "isHostEnabled": it["is_host_enabled"],

      })),
      "is_live": z.boolean(),
      "slot_id": z.string(),
      "user_display_name": z.string(),
      "user_id": z.string(),
      "user_login": z.string(),
      "video_settings": z.object({
        "is_available": z.boolean(),
        "is_guest_enabled": z.boolean(),
        "is_host_enabled": z.boolean()
      }).transform((it) => ({
        /**
         * Flag determining whether the guest has an appropriate video
         * device available to be transmitted to the session.
         */
        "isAvailable": it["is_available"],
        /**
         * Flag determining whether the guest is allowing their video to
         * be transmitted to the session.
         */
        "isGuestEnabled": it["is_guest_enabled"],
        /**
         * Flag determining whether the host is allowing the guest’s
         * video to be seen or heard within the session.
         */
        "isHostEnabled": it["is_host_enabled"],

      })),
      "volume": z.number()
    }).transform((it) => ({
      /**
       * Timestamp when this guest was assigned a slot in the session.
       */
      "assignedAt": it["assigned_at"],
      /**
       * Information about the guest’s audio settings
       */
      "audioSettings": it["audio_settings"],
      /**
       * Flag determining whether or not the guest is visible in the
       * browser source in the host’s streaming software.
       */
      "isLive": it["is_live"],
      /**
       * ID representing this guest’s slot assignment.   
       *   
       * * Host is always in slot "0"
       * * Guests are assigned the following consecutive IDs (e.g, "1",
       * "2", "3", etc)
       * * Screen Share is represented as a special guest with the ID
       * "SCREENSHARE"
       * * The identifier here matches the ID referenced in browser source
       * links used in broadcasting software.
       */
      "slotId": it["slot_id"],
      /**
       * Display name of the guest assigned to this slot.
       */
      "userDisplayName": it["user_display_name"],
      /**
       * User ID of the guest assigned to this slot.
       */
      "userId": it["user_id"],
      /**
       * Login of the guest assigned to this slot.
       */
      "userLogin": it["user_login"],
      /**
       * Information about the guest’s video settings
       */
      "videoSettings": it["video_settings"],
      /**
       * Value from 0 to 100 representing the host’s volume setting for
       * this guest.
       */
      "volume": it["volume"],

    })).array(),
    /**
     * ID uniquely representing the Guest Star session.
     */
    "id": z.string()
  }).array()
});
export interface GetGuestStarSessionResponse extends z.infer<typeof GetGuestStarSessionResponse> {}

export const CreateGuestStarSessionResponse = z.object({
  /**
   * Summary of the session details.
   */
  "data": z.object({
    /**
     * List of guests currently interacting with the Guest Star session.
     */
    "guests": z.object({
      "assigned_at": z.string(),
      "audio_settings": z.object({
        "is_available": z.boolean(),
        "is_guest_enabled": z.boolean(),
        "is_host_enabled": z.boolean()
      }).transform((it) => ({
        /**
         * Flag determining whether the guest has an appropriate audio
         * device available to be transmitted to the session.
         */
        "isAvailable": it["is_available"],
        /**
         * Flag determining whether the guest is allowing their audio to
         * be transmitted to the session.
         */
        "isGuestEnabled": it["is_guest_enabled"],
        /**
         * Flag determining whether the host is allowing the guest’s
         * audio to be seen or heard within the session.
         */
        "isHostEnabled": it["is_host_enabled"],

      })),
      "is_live": z.boolean(),
      "slot_id": z.string(),
      "user_display_name": z.string(),
      "user_id": z.string(),
      "user_login": z.string(),
      "video_settings": z.object({
        "is_available": z.boolean(),
        "is_guest_enabled": z.boolean(),
        "is_host_enabled": z.boolean()
      }).transform((it) => ({
        /**
         * Flag determining whether the guest has an appropriate video
         * device available to be transmitted to the session.
         */
        "isAvailable": it["is_available"],
        /**
         * Flag determining whether the guest is allowing their video to
         * be transmitted to the session.
         */
        "isGuestEnabled": it["is_guest_enabled"],
        /**
         * Flag determining whether the host is allowing the guest’s
         * video to be seen or heard within the session.
         */
        "isHostEnabled": it["is_host_enabled"],

      })),
      "volume": z.number()
    }).transform((it) => ({
      /**
       * Timestamp when this guest was assigned a slot in the session.
       */
      "assignedAt": it["assigned_at"],
      /**
       * Information about the guest’s audio settings
       */
      "audioSettings": it["audio_settings"],
      /**
       * Flag determining whether or not the guest is visible in the
       * browser source in the host’s streaming software.
       */
      "isLive": it["is_live"],
      /**
       * ID representing this guest’s slot assignment.   
       *   
       * * Host is always in slot "0"
       * * Guests are assigned the following consecutive IDs (e.g, "1",
       * "2", "3", etc)
       * * Screen Share is represented as a special guest with the ID
       * "SCREENSHARE"
       * * The identifier here matches the ID referenced in browser source
       * links used in broadcasting software.
       */
      "slotId": it["slot_id"],
      /**
       * Display name of the guest assigned to this slot.
       */
      "userDisplayName": it["user_display_name"],
      /**
       * User ID of the guest assigned to this slot.
       */
      "userId": it["user_id"],
      /**
       * Login of the guest assigned to this slot.
       */
      "userLogin": it["user_login"],
      /**
       * Information about the guest’s video settings
       */
      "videoSettings": it["video_settings"],
      /**
       * Value from 0 to 100 representing the host’s volume setting for
       * this guest.
       */
      "volume": it["volume"],

    })).array(),
    /**
     * ID uniquely representing the Guest Star session.
     */
    "id": z.string()
  }).array()
});
export interface CreateGuestStarSessionResponse extends z.infer<typeof CreateGuestStarSessionResponse> {}



export class GuestStar {
  readonly #twitch: Twitch;

  constructor(twitch: Twitch) {
    this.#twitch = twitch;
  }

  /**
   * BETA Gets the channel settings for configuration of the Guest Star feature
   * for a particular host.
   * 
   * __Authorization:__
   * 
   * * Query parameter `moderator_id` must match the `user_id` in the
   * [User-Access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens)
   * * Requires OAuth Scope: `channel:read:guest_star`,
   * `channel:manage:guest_star`, `moderator:read:guest_star` or
   * `moderator:manage:guest_star`
   */
  async getChannelGuestStarSettings(options: GetChannelGuestStarSettingsRequest): Promise<GetChannelGuestStarSettingsResponse> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/guest_star/channel_settings", this.#twitch.base);
    url.searchParams.append("moderator_id", snapshot.userId);
    url.searchParams.append("broadcaster_id", options.broadcasterId.toString());
    const opts: RequestInit = { method: 'GET' };

    return await this.#twitch.request(url, opts, GetChannelGuestStarSettingsResponse);
  }
  /**
   * BETA Mutates the channel settings for configuration of the Guest Star
   * feature for a particular host.
   * 
   * __Authorization:__
   * 
   * * Query parameter `broadcaster_id` must match the `user_id` in the
   * [User-Access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens)
   * * Requires OAuth Scope: `channel:manage:guest_star`
   */
  async updateChannelGuestStarSettings(options: UpdateChannelGuestStarSettingsRequest): Promise<void> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/guest_star/channel_settings", this.#twitch.base);
    url.searchParams.append("broadcaster_id", options.broadcasterId.toString());
    const opts: RequestInit = { method: 'PUT' };

    const body: Record<string, unknown> = {};

    body.group_layout = options.groupLayout;
    body.is_browser_source_audio_enabled = options.isBrowserSourceAudioEnabled;
    body.is_moderator_send_live_enabled = options.isModeratorSendLiveEnabled;
    body.regenerate_browser_sources = options.regenerateBrowserSources;
    body.slot_count = options.slotCount;
    opts.body = JSON.stringify(body);
    await this.#twitch.request(url, opts);
  }
  /**
   * BETA Provides the caller with a list of pending invites to a Guest Star
   * session, including the invitee’s ready status while joining the waiting
   * room.
   * 
   * __Authorization:__
   * 
   * * Query parameter `broadcaster_id` must match the `user_id` in the
   * [User-Access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens)
   * * Requires OAuth Scope: `channel:read:guest_star`,
   * `channel:manage:guest_star`, `moderator:read:guest_star` or
   * `moderator:manage:guest_star`
   */
  async getGuestStarInvites(options: GetGuestStarInvitesRequest): Promise<GetGuestStarInvitesResponse> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/guest_star/invites", this.#twitch.base);
    url.searchParams.append("broadcaster_id", options.broadcasterId.toString());
    url.searchParams.append("session_id", options.sessionId.toString());
    url.searchParams.append("moderator_id", options.moderatorId.toString());
    const opts: RequestInit = { method: 'GET' };

    return await this.#twitch.request(url, opts, GetGuestStarInvitesResponse);
  }
  /**
   * BETA Sends an invite to a specified guest on behalf of the broadcaster for
   * a Guest Star session in progress.
   * 
   * __Authorization:__
   * 
   * * Query parameter `moderator_id` must match the `user_id` in the
   * [User-Access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens)
   * * Requires OAuth Scope: `channel:manage:guest_star` or
   * `moderator:manage:guest_star`
   */
  async sendGuestStarInvite(options: SendGuestStarInviteRequest): Promise<void> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/guest_star/invites", this.#twitch.base);
    url.searchParams.append("broadcaster_id", options.broadcasterId.toString());
    url.searchParams.append("moderator_id", options.moderatorId.toString());
    url.searchParams.append("session_id", options.sessionId.toString());
    url.searchParams.append("guest_id", options.guestId.toString());
    const opts: RequestInit = { method: 'POST' };

    await this.#twitch.request(url, opts);
  }
  /**
   * BETA Revokes a previously sent invite for a Guest Star session.
   * 
   * __Authorization:__
   * 
   * * Query parameter `moderator_id` must match the `user_id` in the
   * [User-Access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens)
   * * Requires OAuth Scope: `channel:manage:guest_star` or
   * `moderator:manage:guest_star`
   */
  async deleteGuestStarInvite(options: DeleteGuestStarInviteRequest): Promise<void> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/guest_star/invites", this.#twitch.base);
    url.searchParams.append("guest_id", options.guestId.toString());
    url.searchParams.append("session_id", options.sessionId.toString());
    url.searchParams.append("broadcaster_id", options.broadcasterId.toString());
    url.searchParams.append("moderator_id", options.moderatorId.toString());
    const opts: RequestInit = { method: 'DELETE' };

    await this.#twitch.request(url, opts);
  }
  /**
   * BETA Gets information about an ongoing Guest Star session for a particular
   * channel.
   * 
   * __Authorization:__
   * 
   * * Requires OAuth Scope: `channel:read:guest_star`,
   * `channel:manage:guest_star`, `moderator:read:guest_star` or
   * `moderator:manage:guest_star`
   * * Guests must be either invited or assigned a slot within the session
   */
  async getGuestStarSession(options: GetGuestStarSessionRequest): Promise<GetGuestStarSessionResponse> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/guest_star/session", this.#twitch.base);
    url.searchParams.append("broadcaster_id", options.broadcasterId.toString());
    url.searchParams.append("moderator_id", snapshot.userId);
    const opts: RequestInit = { method: 'GET' };

    return await this.#twitch.request(url, opts, GetGuestStarSessionResponse);
  }
  /**
   * BETA Programmatically creates a Guest Star session on behalf of the
   * broadcaster. Requires the broadcaster to be present in the call interface,
   * or the call will be ended automatically.
   * 
   * __Authorization:__
   * 
   * * Query parameter `broadcaster_id` must match the `user_id` in the
   * [User-Access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens)
   * * Requires OAuth Scope: `channel:manage:guest_star`
   */
  async createGuestStarSession(options: CreateGuestStarSessionRequest): Promise<CreateGuestStarSessionResponse> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/guest_star/session", this.#twitch.base);
    url.searchParams.append("broadcaster_id", options.broadcasterId.toString());
    const opts: RequestInit = { method: 'POST' };

    return await this.#twitch.request(url, opts, CreateGuestStarSessionResponse);
  }
  /**
   * BETA Programmatically ends a Guest Star session on behalf of the
   * broadcaster. Performs the same action as if the host clicked the “End
   * Call” button in the Guest Star UI.
   * 
   * __Authorization:__
   * 
   * * Query parameter `broadcaster_id` must match the `user_id` in the
   * [User-Access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens)
   * * Requires OAuth Scope: `channel:manage:guest_star`
   */
  async endGuestStarSession(options: EndGuestStarSessionRequest): Promise<void> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/guest_star/session", this.#twitch.base);
    url.searchParams.append("broadcaster_id", options.broadcasterId.toString());
    url.searchParams.append("session_id", options.sessionId.toString());
    const opts: RequestInit = { method: 'DELETE' };

    await this.#twitch.request(url, opts);
  }
  /**
   * BETA Allows a previously invited user to be assigned a slot within the
   * active Guest Star session, once that guest has indicated they are ready to
   * join.
   * 
   * __Authorization:__
   * 
   * * Query parameter `moderator_id` must match the `user_id` in the
   * [User-Access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens)
   * * Requires OAuth Scope: `channel:manage:guest_star` or
   * `moderator:manage:guest_star`
   */
  async assignGuestStarSlot(options: AssignGuestStarSlotRequest): Promise<void> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/guest_star/slot", this.#twitch.base);
    url.searchParams.append("broadcaster_id", options.broadcasterId.toString());
    url.searchParams.append("moderator_id", options.moderatorId.toString());
    url.searchParams.append("guest_id", options.guestId.toString());
    url.searchParams.append("session_id", options.sessionId.toString());
    url.searchParams.append("slot_id", options.slotId.toString());
    const opts: RequestInit = { method: 'POST' };

    await this.#twitch.request(url, opts);
  }
  /**
   * BETA Allows a caller to remove a slot assignment from a user participating
   * in an active Guest Star session. This revokes their access to the session
   * immediately and disables their access to publish or subscribe to media
   * within the session.
   * 
   * __Authorization:__
   * 
   * * Query parameter `moderator_id` must match the `user_id` in the
   * [User-Access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens)
   * * Requires OAuth Scope: `channel:manage:guest_star` or
   * `moderator:manage:guest_star`
   */
  async deleteGuestStarSlot(options: DeleteGuestStarSlotRequest): Promise<void> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/guest_star/slot", this.#twitch.base);
    url.searchParams.append("broadcaster_id", options.broadcasterId.toString());
    if (options.shouldReinviteGuest) {
      url.searchParams.append("should_reinvite_guest", options.shouldReinviteGuest.toString());
    }
    url.searchParams.append("slot_id", options.slotId.toString());
    url.searchParams.append("moderator_id", snapshot.userId);
    url.searchParams.append("session_id", options.sessionId.toString());
    url.searchParams.append("guest_id", options.guestId.toString());
    const opts: RequestInit = { method: 'DELETE' };

    await this.#twitch.request(url, opts);
  }
  /**
   * BETA Allows a user to update the assigned slot for a particular user
   * within the active Guest Star session.
   * 
   * __Authorization:__
   * 
   * * Query parameter `moderator_id` must match the `user_id` in the
   * [User-Access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens)
   * * Requires OAuth Scope: `channel:manage:guest_star` or
   * `moderator:manage:guest_star`
   */
  async updateGuestStarSlot(options: UpdateGuestStarSlotRequest): Promise<void> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/guest_star/slot", this.#twitch.base);
    url.searchParams.append("broadcaster_id", options.broadcasterId.toString());
    url.searchParams.append("session_id", options.sessionId.toString());
    if (options.destinationSlotId) {
      url.searchParams.append("destination_slot_id", options.destinationSlotId.toString());
    }
    url.searchParams.append("source_slot_id", options.sourceSlotId.toString());
    url.searchParams.append("moderator_id", options.moderatorId.toString());
    const opts: RequestInit = { method: 'PATCH' };

    await this.#twitch.request(url, opts);
  }
  /**
   * BETA Allows a user to update slot settings for a particular guest within a
   * Guest Star session, such as allowing the user to share audio or video
   * within the call as a host. These settings will be broadcasted to all
   * subscribers which control their view of the guest in that slot. One or
   * more of the optional parameters to this API can be specified at any time.
   * 
   * __Authorization:__
   * 
   * * Query parameter `moderator_id` must match the `user_id` in the
   * [User-Access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens)
   * * Requires OAuth Scope: `channel:manage:guest_star` or
   * `moderator:manage:guest_star`
   */
  async updateGuestStarSlotSettings(options: UpdateGuestStarSlotSettingsRequest): Promise<void> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/guest_star/slot_settings", this.#twitch.base);
    url.searchParams.append("broadcaster_id", options.broadcasterId.toString());
    if (options.isAudioEnabled) {
      url.searchParams.append("is_audio_enabled", options.isAudioEnabled.toString());
    }
    if (options.isLive) {
      url.searchParams.append("is_live", options.isLive.toString());
    }
    url.searchParams.append("session_id", options.sessionId.toString());
    url.searchParams.append("moderator_id", snapshot.userId);
    url.searchParams.append("slot_id", options.slotId.toString());
    if (options.isVideoEnabled) {
      url.searchParams.append("is_video_enabled", options.isVideoEnabled.toString());
    }
    if (options.volume) {
      url.searchParams.append("volume", options.volume.toString());
    }
    const opts: RequestInit = { method: 'PATCH' };

    await this.#twitch.request(url, opts);
  }
}
