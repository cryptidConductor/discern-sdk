
/******************************************************************************
 *
 * !!!WARNING!!!
 *
 * This file is automatically generated. Do not edit this file directly.
 *
 * This file was generated using the twitch generation script, found in the
 * `scripts/twitch` directory of the repository.
 *
 *****************************************************************************/

import type { Twitch } from "../index";
import type { TokenId } from "../types";
import { z } from "zod";

export const GetCreatorGoalsResponse = z.object({
  /**
   * The list of goals. The list is empty if the broadcaster hasn’t
   * created goals.
   */
  "data": z.object({
    "broadcaster_id": z.string(),
    "broadcaster_login": z.string(),
    "broadcaster_name": z.string(),
    "created_at": z.string(),
    "current_amount": z.number(),
    "description": z.string(),
    "id": z.string(),
    "target_amount": z.number(),
    "type": z.enum(["follower", "subscription", "subscription_count", "new_subscription", "new_subscription_count"])
  }).transform((it) => ({
    /**
     * An ID that identifies the broadcaster that created the goal.
     */
    "broadcasterId": it["broadcaster_id"],
    /**
     * The broadcaster’s login name.
     */
    "broadcasterLogin": it["broadcaster_login"],
    /**
     * The broadcaster’s display name.
     */
    "broadcasterName": it["broadcaster_name"],
    /**
     * The UTC date and time (in RFC3339 format) that the broadcaster
     * created the goal.
     */
    "createdAt": it["created_at"],
    /**
     * The goal’s current value.  
     *   
     * The goal’s `type` determines how this value is increased or
     * decreased.   
     *   
     * * If `type` is follower, this field is set to the broadcaster's
     * current number of followers. This number increases with new
     * followers and decreases when users unfollow the broadcaster.
     * * If `type` is subscription, this field is increased and decreased
     * by the points value associated with the subscription tier. For
     * example, if a tier-two subscription is worth 2 points, this field
     * is increased or decreased by 2, not 1.
     * * If `type` is subscription\_count, this field is increased by 1
     * for each new subscription and decreased by 1 for each user that
     * unsubscribes.
     * * If `type` is new\_subscription, this field is increased by the
     * points value associated with the subscription tier. For example, if
     * a tier-two subscription is worth 2 points, this field is increased
     * by 2, not 1.
     * * If `type` is new\_subscription\_count, this field is increased by
     * 1 for each new subscription.
     */
    "currentAmount": it["current_amount"],
    /**
     * A description of the goal. Is an empty string if not specified.
     */
    "description": it["description"],
    /**
     * An ID that identifies this goal.
     */
    "id": it["id"],
    /**
     * The goal’s target value. For example, if the broadcaster has 200
     * followers before creating the goal, and their goal is to double
     * that number, this field is set to 400.
     */
    "targetAmount": it["target_amount"],
    /**
     * The type of goal. Possible values are:   
     *   
     * * follower — The goal is to increase followers.
     * * subscription — The goal is to increase subscriptions. This type
     * shows the net increase or decrease in tier points associated with
     * the subscriptions.
     * * subscription\_count — The goal is to increase subscriptions.
     * This type shows the net increase or decrease in the number of
     * subscriptions.
     * * new\_subscription — The goal is to increase subscriptions. This
     * type shows only the net increase in tier points associated with the
     * subscriptions (it does not account for users that unsubscribed
     * since the goal started).
     * * new\_subscription\_count — The goal is to increase
     * subscriptions. This type shows only the net increase in the number
     * of subscriptions (it does not account for users that unsubscribed
     * since the goal started).
     */
    "type": it["type"],

  })).array()
});
export interface GetCreatorGoalsResponse extends z.infer<typeof GetCreatorGoalsResponse> {}



export class Goals {
  readonly #twitch: Twitch;

  constructor(twitch: Twitch) {
    this.#twitch = twitch;
  }

  /**
   * Gets the broadcaster’s list of active goals. Use this endpoint to get
   * the current progress of each goal.
   * 
   * Instead of polling for the progress of a goal, consider
   * [subscribing](https://dev.twitch.tv/docs/eventsub/manage-subscriptions) to
   * receive notifications when a goal makes progress using the
   * [channel.goal.progress](https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types#channelgoalprogress) 
   * subscription type. [Read
   * More](https://dev.twitch.tv/docs/api/goals#requesting-event-notifications)
   * 
   * __Authorization:__
   * 
   * Requires a [user access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens) that
   * includes the **channel:read:goals** scope.
   */
  async getCreatorGoals(): Promise<GetCreatorGoalsResponse> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/goals", this.#twitch.base);
    url.searchParams.append("broadcaster_id", snapshot.userId);
    const opts: RequestInit = { method: 'GET' };

    return await this.#twitch.request(url, opts, GetCreatorGoalsResponse);
  }
}
