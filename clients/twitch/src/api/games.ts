
/******************************************************************************
 *
 * !!!WARNING!!!
 *
 * This file is automatically generated. Do not edit this file directly.
 *
 * This file was generated using the twitch generation script, found in the
 * `scripts/twitch` directory of the repository.
 *
 *****************************************************************************/

import type { Twitch } from "../index";
import type { TokenId } from "../types";
import { z } from "zod";

export interface GetGamesRequest {
  /**
   * The [IGDB](https://www.igdb.com/) ID of the game to get. Include this
   * parameter for each game you want to get. For example,
   * `&igdb_id=1234&igdb_id=5678`. You may specify a maximum of 100 IDs. The
   * endpoint ignores duplicate and invalid IDs or IDs that weren’t found.
   */
  igdbId?: string[],
  /**
   * The name of the category or game to get. The name must exactly match the
   * category’s or game’s title. Include this parameter for each category
   * or game you want to get. For example, `&name=foo&name=bar`. You may
   * specify a maximum of 100 names. The endpoint ignores duplicate names and
   * names that weren’t found.
   */
  name?: string[],
  /**
   * The ID of the category or game to get. Include this parameter for each
   * category or game you want to get. For example, `&id=1234&id=5678`. You may
   * specify a maximum of 100 IDs. The endpoint ignores duplicate and invalid
   * IDs or IDs that weren’t found.
   */
  id?: string[],
}
export interface GetTopGamesRequest {
  /**
   * The maximum number of items to return per page in the response. The
   * minimum page size is 1 item per page and the maximum is 100 items per
   * page. The default is 20.
   */
  first?: number,
  /**
   * The cursor used to get the previous page of results. The **Pagination**
   * object in the response contains the cursor’s value. [Read
   * More](https://dev.twitch.tv/docs/api/guide#pagination)
   */
  before?: string,
  /**
   * The cursor used to get the next page of results. The **Pagination** object
   * in the response contains the cursor’s value. [Read
   * More](https://dev.twitch.tv/docs/api/guide#pagination)
   */
  after?: string,
}
export const GetGamesResponse = z.object({
  /**
   * The list of categories and games. The list is empty if the specified
   * categories and games weren’t found.
   */
  "data": z.object({
    "box_art_url": z.string(),
    "id": z.string(),
    "igdb_id": z.string(),
    "name": z.string()
  }).transform((it) => ({
    /**
     * A URL to the category’s or game’s box art. You must replace the
     * `{width}x{height}` placeholder with the size of image you want.
     */
    "boxArtUrl": it["box_art_url"],
    /**
     * An ID that identifies the category or game.
     */
    "id": it["id"],
    /**
     * The ID that [IGDB](https://www.igdb.com/) uses to identify this
     * game. If the IGDB ID is not available to Twitch, this field is set
     * to an empty string.
     */
    "igdbId": it["igdb_id"],
    /**
     * The category’s or game’s name.
     */
    "name": it["name"],

  })).array()
});
export interface GetGamesResponse extends z.infer<typeof GetGamesResponse> {}

export const GetTopGamesResponse = z.object({
  /**
   * The list of broadcasts. The broadcasts are sorted by the number of
   * viewers, with the most popular first.
   */
  "data": z.object({
    "box_art_url": z.string(),
    "id": z.string(),
    "igdb_id": z.string(),
    "name": z.string()
  }).transform((it) => ({
    /**
     * A URL to the category’s or game’s box art. You must replace the
     * `{width}x{height}` placeholder with the size of image you want.
     */
    "boxArtUrl": it["box_art_url"],
    /**
     * An ID that identifies the category or game.
     */
    "id": it["id"],
    /**
     * The ID that [IGDB](https://www.igdb.com/) uses to identify this
     * game. If the IGDB ID is not available to Twitch, this field is set
     * to an empty string.
     */
    "igdbId": it["igdb_id"],
    /**
     * The category’s or game’s name.
     */
    "name": it["name"],

  })).array(),
  /**
   * Contains the information used to page through the list of results.
   * The object is empty if there are no more pages left to page through.
   * [Read More](https://dev.twitch.tv/docs/api/guide#pagination)
   */
  "pagination": z.object({
    /**
     * The cursor used to get the next page of results. Use the cursor to
     * set the request’s _after_ or _before_ query parameter to get the
     * next or previous page of results.
     */
    "cursor": z.string().optional()
  }).optional()
});
export interface GetTopGamesResponse extends z.infer<typeof GetTopGamesResponse> {}



export class Games {
  readonly #twitch: Twitch;

  constructor(twitch: Twitch) {
    this.#twitch = twitch;
  }

  /**
   * Gets information about specified categories or games.
   * 
   * You may get up to 100 categories or games by specifying their ID or name.
   * You may specify all IDs, all names, or a combination of IDs and names. If
   * you specify a combination of IDs and names, the total number of IDs and
   * names must not exceed 100.
   * 
   * __Authorization:__
   * 
   * Requires an [app access
   * token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or
   * [user access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens).
   */
  async getGames(options: GetGamesRequest): Promise<GetGamesResponse> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/games", this.#twitch.base);
    if (options.igdbId) {
      for (const value of options.igdbId) {
      url.searchParams.append("igdb_id", value.toString());
    }
    }
    if (options.name) {
      for (const value of options.name) {
      url.searchParams.append("name", value.toString());
    }
    }
    if (options.id) {
      for (const value of options.id) {
      url.searchParams.append("id", value.toString());
    }
    }
    const opts: RequestInit = { method: 'GET' };

    return await this.#twitch.request(url, opts, GetGamesResponse);
  }
  /**
   * Gets information about all broadcasts on Twitch.
   * 
   * __Authorization:__
   * 
   * Requires an [app access
   * token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or
   * [user access
   * token](https://dev.twitch.tv/docs/authentication#user-access-tokens).
   */
  async getTopGames(options: GetTopGamesRequest): Promise<GetTopGamesResponse> {
    const snapshot = await this.#twitch.snapshot();
    const url = new URL("/games/top", this.#twitch.base);
    if (options.first) {
      url.searchParams.append("first", options.first.toString());
    }
    if (options.before) {
      url.searchParams.append("before", options.before.toString());
    }
    if (options.after) {
      url.searchParams.append("after", options.after.toString());
    }
    const opts: RequestInit = { method: 'GET' };

    return await this.#twitch.request(url, opts, GetTopGamesResponse);
  }
}
